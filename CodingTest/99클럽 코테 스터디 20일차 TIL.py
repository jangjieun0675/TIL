# 2024. 06. 08. 토요일
# 오늘의 학습 키워드 : 동적계획법
# 해시태그 : #99클럽 #코딩테스트 준비 #개발자 취업 #항해99 #TIL

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 나의 문제 풀이
class Solution:
    def fib(self, n: int) -> int:
        # n이 1 이하인 경우, n을 반환 (기본 케이스)
        if n <= 1:
            return n
        # 피보나치 수열을 저장할 리스트를 초기화 -> 첫 두 숫자는 0과 1
        fib = [0, 1] + [0]*(n-1)
        # 2부터 n까지 각 피보나치 수를 계산하고 리스트에 저장
        for i in range(2, n+1):
            fib[i] = fib[i-1] + fib[i-2]
        # n번째 피보나치 수를 반환
        return fib[n]
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 개선할 사항
# 시간 복잡도가 O(n) 
# 공간 복잡도가 O(n)

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 문제 설명
# he Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

# F(0) = 0, F(1) = 1
# F(n) = F(n - 1) + F(n - 2), for n > 1.
# Given n, calculate F(n).


# Example 1:

# Input: n = 2
# Output: 1
# Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
# Example 2:

# Input: n = 3
# Output: 2
# Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
# Example 3:

# Input: n = 4
# Output: 3
# Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.